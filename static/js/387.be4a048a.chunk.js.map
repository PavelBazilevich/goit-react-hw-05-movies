{"version":3,"file":"static/js/387.be4a048a.chunk.js","mappings":"8SACMA,EAAS,mCAEfC,EAAAA,GAAAA,SAAAA,QAAyB,gCAElB,IAAMC,EAAiB,mCAAG,oGACRD,EAAAA,GAAAA,IAAU,qBAAsB,CACrDE,OAAQ,CACNC,KAAM,EACNC,QAASL,KAJkB,cACzBM,EADyB,yBAOxBA,EAASC,KAAKC,SAPU,2CAAH,qDAUjBC,EAAW,mCAAG,WAAMC,GAAN,uFACFT,EAAAA,GAAAA,IAAU,eAAgB,CAC/CE,OAAQ,CACNE,QAASL,EACTW,MAAOD,KAJc,cACnBJ,EADmB,yBAOlBA,EAASC,KAAKC,SAPI,2CAAH,sDAUXI,EAAU,mCAAG,WAAMC,GAAN,uFACDZ,EAAAA,GAAAA,IAAA,gBAAmBY,GAAM,CAC9CV,OAAQ,CACNE,QAASL,KAHW,cAClBM,EADkB,yBAMjBA,EAASC,MANQ,2CAAH,sDASVO,EAAO,mCAAG,WAAMD,GAAN,uFACEZ,EAAAA,GAAAA,IAAA,gBAAmBY,EAAnB,YAAiC,CACtDV,OAAQ,CACNE,QAASL,KAHQ,cACfe,EADe,yBAMdA,EAASR,KAAKS,MANA,2CAAH,sDASPC,EAAU,mCAAG,WAAMJ,GAAN,uFACDZ,EAAAA,GAAAA,IAAA,gBAAmBY,EAAnB,YAAiC,CACtDV,OAAQ,CACNE,QAASL,KAHW,cAClBe,EADkB,yBAMjBA,EAASR,KAAKC,SANG,2CAAH,qD,sDC3ChB,IAAMU,EAAY,SAAAC,GAEvB,OAAOA,EADK,mCACQA,EAAO,4CAC5B,C,yKCDYC,EAASC,EAAAA,GAAAA,IAAH,yGAONC,EAAWD,EAAAA,GAAAA,GAAH,yIASRE,EAAWF,EAAAA,GAAAA,GAAH,iJAURG,EAAYH,EAAAA,GAAAA,EAAH,oE,SCsBtB,EA3Ca,WAAO,IAAD,EACjB,aAAgCI,EAAAA,EAAAA,UAAS,WAAzC,QAAgD,CAAC,EAAjD,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQhB,GAAOiB,EAAAA,EAAAA,MAAPjB,GAeR,OAbAkB,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,8GAESlB,EAAAA,EAAAA,IAAQD,GAFjB,OAERoB,EAFQ,OAGdN,EAAYM,GAHE,gDAKdJ,EAAS,uDALK,yDAAH,qDAQfG,GAED,GAAE,CAACnB,KAGF,UAACO,EAAD,WACGQ,IAAS,uBAAIA,IACQ,KAAb,OAARF,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,UACT,sEAEO,OAARR,QAAQ,IAARA,OAAA,EAAAA,EAAUQ,QAAS,IAClB,SAACZ,EAAD,UACGI,EAASS,KACR,YAA2D,IAAxDtB,EAAuD,EAAvDA,GAAIuB,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACxC,OACE,UAAChB,EAAD,YACE,gBAAKiB,KAAKtB,EAAAA,EAAAA,GAAUkB,GAAeK,IAAKJ,KACxC,SAACb,EAAD,UAAYc,KACZ,uCAAeC,OAHF1B,EAMlB,QAMZ,C","sources":["Utils/Api.jsx","Utils/createUrl.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\nconst apiKey = '53b17a0d0ffee53cfb4c8768c7c3aa3a';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nexport const getTrendingMovies = async () => {\n  const response = await axios.get('trending/movie/day', {\n    params: {\n      page: 1,\n      api_key: apiKey,\n    },\n  });\n  return response.data.results;\n};\n\nexport const searhMovies = async searchqQuery => {\n  const response = await axios.get('search/movie', {\n    params: {\n      api_key: apiKey,\n      query: searchqQuery,\n    },\n  });\n  return response.data.results;\n};\n\nexport const getDetails = async id => {\n  const response = await axios.get(`movie/${id}`, {\n    params: {\n      api_key: apiKey,\n    },\n  });\n  return response.data;\n};\n\nexport const getCast = async id => {\n  const responce = await axios.get(`movie/${id}/credits`, {\n    params: {\n      api_key: apiKey,\n    },\n  });\n  return responce.data.cast;\n};\n\nexport const getReviews = async id => {\n  const responce = await axios.get(`movie/${id}/reviews`, {\n    params: {\n      api_key: apiKey,\n    },\n  });\n  return responce.data.results;\n};\n","export const createUrl = path => {\n  const url = 'https://image.tmdb.org/t/p/w500/';\n  return path ? url + path : 'https://i.postimg.cc/yxhh8Dtk/download.png';\n};\n","import styled from 'styled-components';\n\nexport const Layout = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 3px;\n  padding: 20px 20px;\n`;\n\nexport const CastList = styled.ul`\n  padding: 0 20px;\n  display: flex;\n  margin: 0 -10px;\n  flex-wrap: wrap;\n  gap: 10px;\n  list-style: disc;\n`;\n\nexport const CastItem = styled.li`\n  flex: 1 1 auto;\n  margin: 0 10px;\n  padding: 5px 5px;\n  & > img {\n    width: 150px;\n    margin-bottom: 3px;\n  }\n`;\n\nexport const ActorName = styled.p`\n  margin-bottom: 3px;\n  font-weight: 500;\n`;\n","import { createUrl } from '../../Utils/createUrl';\nimport { useParams } from 'react-router-dom';\nimport { getCast } from 'Utils/Api';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { Layout, CastList, CastItem, ActorName } from './Cast.styled';\n\nconst Cast = () => {\n  const [castData, setCastData] = useState([]) ?? {};\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fethCasts = async () => {\n      try {\n        const fethCast = await getCast(id);\n        setCastData(fethCast);\n      } catch {\n        setError('Oops... ðŸ˜¥. Please try again ðŸ˜Š');\n      }\n    };\n    fethCasts();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  return (\n    <Layout>\n      {error && <p>{error}</p>}\n      {castData?.length === 0 && (\n        <p>We didn't find any actors for this movie.</p>\n      )}\n      {castData?.length > 0 && (\n        <CastList>\n          {castData.map(\n            ({ id, profile_path, original_name, name, character }) => {\n              return (\n                <CastItem key={id}>\n                  <img src={createUrl(profile_path)} alt={original_name} />\n                  <ActorName>{name}</ActorName>\n                  <p>Character: {character}</p>\n                </CastItem>\n              );\n            }\n          )}\n        </CastList>\n      )}\n    </Layout>\n  );\n};\n\nexport default Cast;\n"],"names":["apiKey","axios","getTrendingMovies","params","page","api_key","response","data","results","searhMovies","searchqQuery","query","getDetails","id","getCast","responce","cast","getReviews","createUrl","path","Layout","styled","CastList","CastItem","ActorName","useState","castData","setCastData","error","setError","useParams","useEffect","fethCasts","fethCast","length","map","profile_path","original_name","name","character","src","alt"],"sourceRoot":""}